/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  7+                                   |
|   \\  /    A nd           | Web:      www.openfoam.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvModels;

}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


SwSource
{
    type            coded;

    selectionMode   all;
    // selectionMode   cellSet;
    // cellSet         box1;

    field           Sw;

    codeInclude
    #{
    #};

    codeAddSup
    #{
        // Pout<< "**codeAddSup**" << endl;
        // const Time& time = mesh().time();
        // const scalarField& V = mesh().V();
        // scalarField& heSource = eqn.source();
        // heSource -= 0.1*V; //*sqr(time.value())*V;

        const Time& time = mesh().time();
        const scalar currentTime = time.value();

        const scalarField& V = mesh().V();
        scalarField& SwSource = eqn.source();
        
        // // =========== BOX1 SELECTION ========================
        // // ===================================================
        // // Retrieve the cell set named "box1"
        // cellSet selectedCells(mesh(), "box1");
        // // Iterate over the cell set and apply the source term
        // forAllConstIter(labelHashSet, selectedCells, iter)
        // {
        //     label cellI = iter.key();
        //     // SwSource[cellI] -= (0.1) * V[cellI];
            
        //     const scalar x = mesh().C()[cellI].component(0);
        //     const scalar y = 0.5;

        //     SwSource[cellI] -= ((x-pow(x,2))) * V[cellI];
        // }



        // =========== ALL SELECTION ========================
        // ===================================================
        forAll(SwSource, i)
        {
            const scalar x = mesh().C()[i].component(0);
            const scalar y = 0.5;

            // SwSource[i] -= ((x-pow(x,2))*(y-pow(y,2)) + 
            //                 2.0*currentTime*(x-pow(x,2)+y-pow(y,2))) * V[i];

            SwSource[i] -= (x/4.0 - pow(x,2)/4.0 + 0.5*currentTime) * V[i];
        };
 

    #};

    codeAddRhoSup
    #{
        Pout<< "**codeAddRhoSup**" << endl;
    #};

    codeAddAlphaRhoSup
    #{
        Pout<< "**codeAddAlphaRhoSup**" << endl;
    #};
}


pSource
{
    type            coded;

    selectionMode   all;
    // selectionMode   cellSet;
    // cellSet         box1;

    field           p;

    codeInclude
    #{
    #};

    codeAddSup
    #{
        const Time& time = mesh().time();
        const scalar currentTime = time.value();

        const scalarField& V = mesh().V();
        scalarField& pSource = eqn.source();
        
        // // =========== BOX1 SELECTION ========================
        // // ===================================================
        // // Retrieve the cell set named "box1"
        // cellSet selectedCells(mesh(), "box1");
        // // Iterate over the cell set and apply the source term
        // forAllConstIter(labelHashSet, selectedCells, iter)
        // {
        //     label cellI = iter.key();
        //     // SwSource[cellI] -= (0.1) * V[cellI];
            
        //     const scalar x = mesh().C()[cellI].component(0);
        //     const scalar y = 0.5;

        //     SwSource[cellI] -= ((x-pow(x,2))) * V[cellI];
        // }



        // =========== ALL SELECTION ========================
        // ===================================================
        forAll(pSource, i)
        {
            const scalar x = mesh().C()[i].component(0);
            const scalar y = 0.5;

            pSource[i] -= currentTime * V[i]; // 4.0*currentTime*(x-pow(x,2)+y-pow(y,2)) * V[i];
        };
 

    #};

    codeAddRhoSup
    #{
        Pout<< "**codeAddRhoSup**" << endl;
    #};

    codeAddAlphaRhoSup
    #{
        Pout<< "**codeAddAlphaRhoSup**" << endl;
    #};
}
